{"version":3,"sources":["ApiClient.js","components/TagFilter/TagFilter.js","components/Blurb/Blurb.js","components/ImageScroller/ImageScroller.js","App.js","serviceWorker.js","index.js"],"names":["checkStatus","response","status","error","Error","statusText","console","log","parseJSON","json","ApiClient","search","tags","page","cb","url","fetch","accept","then","TagFilter","handleSubmitClick","props","onTagsChange","_tags","value","className","type","ref","input","onClick","this","React","Component","Blurb","Fragment","ImageScroller","hasNextPage","isNextPageLoading","items","loadNextPage","itemCount","length","loadMoreItems","isItemLoaded","index","renderRow","display","style","src","alt","onItemsRendered","height","itemSize","width","App","state","_loadNextPage","setState","results","nextPage","photos","pages","total","concat","photo","_onTagsChange","id","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7a58721e.chunk.js","sourcesContent":["/* eslint-disable no-undef */\nfunction search(tags, page, cb) {\n  page = page || 1;\n  let url; \n\n  // if there are no tags then we can leave\n  if (tags) {\n    url = `feed/${page}/${tags}`;\n  } else {\n    url = `feed/${page}`;\n  }\n\n  return fetch(url, {\n    accept: \"application/json\"\n  })\n    .then(checkStatus)\n    .then(parseJSON)\n    .then(cb);\n\n  // return Promise.resolve(\n  //   {\n  //     photos: {\n  //       page: 1,\n  //       pages: 20,\n  //       perpage: 5,\n  //       total: '202704',\n  //       photo: [\n  //         'https://farm66.staticflickr.com/65535/48592965357_22ab22e082_m.jpg',\n  //         'https://farm66.staticflickr.com/65535/48592821811_0e80dde859_m.jpg',\n  //         'https://farm66.staticflickr.com/65535/48592963737_b0ee686e52_m.jpg',\n  //         'https://farm66.staticflickr.com/65535/48592962677_b45c2d2cb0_m.jpg',\n  //         'https://farm66.staticflickr.com/65535/48592818661_9cf2087e67_m.jpg',\n  //       ]\n  //     },\n  //     stat: 'ok'\n  //   }\n  // );\n}\n\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n  const error = new Error(`HTTP Error ${response.statusText}`);\n  error.status = response.statusText;\n  error.response = response;\n  console.log(error); // eslint-disable-line no-console\n  throw error;\n}\n\nfunction parseJSON(response) {\n  return response.json();\n}\n\nconst ApiClient = { search };\nexport default ApiClient;\n","import React from 'react';\nimport './TagFilter.css';\n\nclass TagFilter extends React.Component {\n  handleSubmitClick = () => {\n    this.props.onTagsChange(this._tags.value);\n  }\n\n  render() {\n    return (\n      <div>\n      <input className='tag-filter-input' type='text' ref={input => this._tags = input} />\n      <button onClick={this.handleSubmitClick} className='button large'>Filter</button>\n      </div>\n    );\n  }\n}\n\nexport default TagFilter;\n\n","import React from 'react';\nimport './Blurb.css';\n\n\nfunction Blurb() {\n  return (\n    <React.Fragment>\n    <h1>Veyor</h1>\n    <h3>Front End</h3>\n    <h3>Coding Challenge</h3>\n    <p>Scroll the images fetched from flickr in the phone like thing on the right....</p>\n    </React.Fragment>\n  );\n}\n\nexport default Blurb;\n\n","import React from 'react';\nimport './ImageScroller.css';\nimport { FixedSizeList as List } from 'react-window';\nimport InfiniteLoader from \"react-window-infinite-loader\";\n\nclass ImageScroller extends React.Component {\n  render() {\n    const { hasNextPage, isNextPageLoading, items, loadNextPage } = this.props;\n    const itemCount = hasNextPage ? items.length + 1 : items.length;\n    const loadMoreItems = isNextPageLoading ? () => {} : loadNextPage;\n    const isItemLoaded = index => !hasNextPage || index < items.length;\n\n    const renderRow = ({ index, style }) => {\n      let display;\n      if (!isItemLoaded(index)) {\n        display = <div style={style}>Loading...</div>;\n      } else {\n        display = <img className='scroll-image' src={items[index]} alt=\"\" />;\n      }\n      return (\n        <div style={style}>\n        {display}\n        </div>\n      );\n    };\n\n    return (\n      <div className=\"image phone\">\n      <div className=\"inner\">\n      <InfiniteLoader isItemLoaded={isItemLoaded} itemCount={itemCount} loadMoreItems={loadMoreItems}>\n      {({ onItemsRendered, ref }) => (\n        <List height={380} itemCount={itemCount} onItemsRendered={onItemsRendered} ref={ref} itemSize={280} width={340} >\n        {renderRow}\n        </List>\n      )}\n      </InfiniteLoader>\n      </div>\n      </div>\n  );\n  }\n}\n\nexport default ImageScroller;\n\n","import React, { PureComponent } from 'react';\nimport './App.css';\nimport ApiClient from \"./ApiClient\";\n\nimport TagFilter from './components/TagFilter';\nimport Blurb from './components/Blurb';\nimport ImageScroller from './components/ImageScroller';\n\nclass App extends PureComponent {\n  state = {\n    tags: '',\n    page: 1,\n    hasNextPage: true,\n    isNextPageLoading: false,\n    items: []\n  };\n\n  _loadNextPage = (...args) => {\n    this.setState({ isNextPageLoading: true }, () => {\n      ApiClient.search(this.state.tags, this.state.page, (results) => {\n        const nextPage = this.state.page < results.photos.pages ?\n          results.photos.page + 1 : results.photos.page;\n        this.setState(state => ({\n          page: nextPage,\n          hasNextPage: state.items.length < results.photos.total,\n          isNextPageLoading: false,\n          items: [...state.items].concat(results.photos.photo)\n        }));\n      });\n    });\n  };\n\n  _onTagsChange = tags => {\n    // NOTE: in this case we need to clear out any previously\n    // loaded items.\n    this.setState({tags: tags, items: []}, () => this._loadNextPage());\n  };\n\n  render() {\n    const { hasNextPage, isNextPageLoading, items } = this.state;\n    return (\n      <header id=\"header\">\n      <div className='content'>\n      <Blurb/>\n      <TagFilter onTagsChange={this._onTagsChange}/>\n      </div>\n      <ImageScroller\n      hasNextPage={hasNextPage}\n      isNextPageLoading={isNextPageLoading}\n      items={items}\n      loadNextPage={this._loadNextPage}\n      />\n      </header>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}